import os
import logging
from datetime import datetime
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
DEEPSEEK_BASE_URL = "https://api.deepseek.com"

logger = logging.getLogger(__name__)

def format_menu_text(text):
    """–ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞ —ç–º–æ–¥–∑–∏"""
    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —ç–º–æ–¥–∑–∏
    text = text.replace('# ', 'üçΩÔ∏è ')
    text = text.replace('## ', 'üìÖ ')
    text = text.replace('### ', 'üç¥ ')
    text = text.replace('- ', '‚Ä¢ ')
    text = text.replace('* ', '‚Ä¢ ')
    text = text.replace('–ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ', 'üçΩÔ∏è –ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ')
    text = text.replace('–°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö', 'üõçÔ∏è –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö')

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    days = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–í—Ç–æ—Ä–Ω–∏–∫': 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫',
        '–°—Ä–µ–¥–∞': 'üìÖ –°—Ä–µ–¥–∞',
        '–ß–µ—Ç–≤–µ—Ä–≥': 'üìÖ –ß–µ—Ç–≤–µ—Ä–≥',
        '–ü—è—Ç–Ω–∏—Ü–∞': 'üìÖ –ü—è—Ç–Ω–∏—Ü–∞',
        '–°—É–±–±–æ—Ç–∞': 'üìÖ –°—É–±–±–æ—Ç–∞',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'üìÖ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    for day, emoji_day in days.items():
        text = text.replace(f'{day}:', f'{emoji_day}:')

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –ø—Ä–∏—ë–º–∞–º –ø–∏—â–∏
    text = text.replace('–ó–∞–≤—Ç—Ä–∞–∫:', 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫:')
    text = text.replace('–û–±–µ–¥:', 'üç≤ –û–±–µ–¥:')
    text = text.replace('–£–∂–∏–Ω:', 'üçΩÔ∏è –£–∂–∏–Ω:')

    return text

def generate_weekly_menu(preferences):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        logger.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ DeepSeek...")
        client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é (7 –¥–Ω–µ–π) –¥–ª—è —Å–µ–º—å–∏ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}.

–ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º, –ø–æ–ª–µ–∑–Ω—ã–º –∏ –≤–∫—É—Å–Ω—ã–º –∏ –ª–µ–≥–∫–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —É–∫–∞–∂–∏:
1. –ó–∞–≤—Ç—Ä–∞–∫
2. –û–±–µ–¥  
3. –£–∂–∏–Ω

–ü–æ—Å–ª–µ –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

–í–ê–ñ–ù–û: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —Å–∏–º–≤–æ–ª—ã # –∏ * –≤ –æ—Ç–≤–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∏—Ä–µ (-) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ:
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:
- –ó–∞–≤—Ç—Ä–∞–∫: [–±–ª—é–¥–æ]
- –û–±–µ–¥: [–±–ª—é–¥–æ]
- –£–∂–∏–Ω: [–±–ª—é–¥–æ]

[–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π]

–°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö:
- [–ø—Ä–æ–¥—É–∫—Ç] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- [–ø—Ä–æ–¥—É–∫—Ç] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
[–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ]"""

        return _generate_menu(client, prompt)

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DeepSeek: {str(e)}"
        logger.error(error_msg)
        return error_msg

def generate_daily_menu(preferences):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å"""
    try:
        logger.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ DeepSeek...")
        client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–ª—è —Å–µ–º—å–∏ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}.

–ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º, –≤–∫—É—Å–Ω—ã–º –∏ –ª–µ–≥–∫–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –£–∫–∞–∂–∏:
1. –ó–∞–≤—Ç—Ä–∞–∫
2. –û–±–µ–¥  
3. –£–∂–∏–Ω

–ü–æ—Å–ª–µ –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

–í–ê–ñ–ù–û: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —Å–∏–º–≤–æ–ª—ã # –∏ * –≤ –æ—Ç–≤–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∏—Ä–µ (-) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–ú–ï–ù–Æ –ù–ê –î–ï–ù–¨:
- –ó–∞–≤—Ç—Ä–∞–∫: [–±–ª—é–¥–æ]
- –û–±–µ–¥: [–±–ª—é–¥–æ]
- –£–∂–∏–Ω: [–±–ª—é–¥–æ]

–°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö:
- [–ø—Ä–æ–¥—É–∫—Ç] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- [–ø—Ä–æ–¥—É–∫—Ç] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
[–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ]"""

        return _generate_menu(client, prompt)

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DeepSeek: {str(e)}"
        logger.error(error_msg)
        return error_msg

def _generate_menu(client, prompt):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""
    logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ DeepSeek...")

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
    models_to_try = ["deepseek-chat", "deepseek-coder"]

    for model in models_to_try:
        try:
            logger.info(f"–ü—Ä–æ–±—É—é –º–æ–¥–µ–ª—å: {model}")
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            break
        except Exception as model_error:
            logger.warning(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {model_error}")
            if model == models_to_try[-1]:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å
                raise model_error
            continue

    menu_content = response.choices[0].message.content
    logger.info(f"–ú–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞: {len(menu_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    return menu_content

def get_ai_response(message, session_messages=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞"""
    try:
        if not DEEPSEEK_API_KEY:
            return "‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á DeepSeek –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        logger.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ DeepSeek –¥–ª—è –æ–±—â–µ–≥–æ —á–∞—Ç–∞...")
        client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = [
            {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."}
        ]
        
        if session_messages:
            last_msgs = list(session_messages)[-5:]
            for msg in last_msgs:
                messages.append({
                    "role": msg.message_type,
                    "content": msg.content
                })
        
        messages.append({"role": "user", "content": message})

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
        models_to_try = ["deepseek-chat", "deepseek-coder"]

        for model in models_to_try:
            try:
                logger.info(f"–ü—Ä–æ–±—É—é –º–æ–¥–µ–ª—å: {model}")
                response = client.chat.completions.create(
                    model=model,
                    messages=messages,
                    temperature=0.7,
                    max_tokens=1000
                )
                break
            except Exception as model_error:
                logger.warning(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {model_error}")
                if model == models_to_try[-1]:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å
                    raise model_error
                continue

        ai_response = response.choices[0].message.content
        logger.info(f"AI –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        return ai_response

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å AI: {str(e)}"
        logger.error(error_msg)
        return error_msg 