import logging
import os
import signal
import sys
import asyncio
import uuid
import time
from datetime import datetime
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, JobQueue
import urllib.request
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
DEEPSEEK_API_KEY = os.environ['DEEPSEEK_API_KEY']
DEEPSEEK_BASE_URL = "https://api.deepseek.com"

# Replit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
PORT = int(os.getenv('PORT', 8080))

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
SESSION_ID = str(uuid.uuid4())[:8]
BOT_START_TIME = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

logging.basicConfig(
    format=f'%(asctime)s - [{SESSION_ID}] - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
logging.info(f"üöÄ –ë–û–¢ –ó–ê–ü–£–©–ï–ù! Session ID: {SESSION_ID}, –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {BOT_START_TIME}")

class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            uptime_seconds = int(time.time() - time.mktime(time.strptime(BOT_START_TIME, '%Y-%m-%d %H:%M:%S')))
            
            response = {
                "status": "ok",
                "session_id": SESSION_ID,
                "start_time": BOT_START_TIME,
                "current_time": current_time,
                "uptime_seconds": uptime_seconds,
                "active_timers": len([k for k, v in user_timers.items() if v == 'waiting'])
            }
            
            import json
            self.wfile.write(json.dumps(response).encode())
            logging.info(f"üè• Health check –∑–∞–ø—Ä–æ—Å –æ—Ç {self.client_address[0]}")
        else:
            self.send_response(404)
            self.end_headers()
    
    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        pass

def start_health_server():
    """–ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check"""
    server = HTTPServer(('0.0.0.0', PORT), HealthCheckHandler)
    logging.info(f"üè• Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    server.serve_forever()

def format_menu_text(text):
    """–ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞ —ç–º–æ–¥–∑–∏"""
    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ —ç–º–æ–¥–∑–∏
    text = text.replace('# ', 'üçΩÔ∏è ')
    text = text.replace('## ', 'üìÖ ')
    text = text.replace('### ', 'üç¥ ')
    text = text.replace('- ', '‚Ä¢ ')
    text = text.replace('* ', '‚Ä¢ ')
    text = text.replace('–ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ', 'üçΩÔ∏è –ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ')
    text = text.replace('–°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö', 'üõçÔ∏è –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö')

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    days = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–í—Ç–æ—Ä–Ω–∏–∫': 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫',
        '–°—Ä–µ–¥–∞': 'üìÖ –°—Ä–µ–¥–∞',
        '–ß–µ—Ç–≤–µ—Ä–≥': 'üìÖ –ß–µ—Ç–≤–µ—Ä–≥',
        '–ü—è—Ç–Ω–∏—Ü–∞': 'üìÖ –ü—è—Ç–Ω–∏—Ü–∞',
        '–°—É–±–±–æ—Ç–∞': 'üìÖ –°—É–±–±–æ—Ç–∞',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'üìÖ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    for day, emoji_day in days.items():
        text = text.replace(f'{day}:', f'{emoji_day}:')

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –ø—Ä–∏—ë–º–∞–º –ø–∏—â–∏
    text = text.replace('–ó–∞–≤—Ç—Ä–∞–∫:', 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫:')
    text = text.replace('–û–±–µ–¥:', 'üç≤ –û–±–µ–¥:')
    text = text.replace('–£–∂–∏–Ω:', 'üçΩÔ∏è –£–∂–∏–Ω:')

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø—Ä–∏—ë–º–∞–º–∏ –ø–∏—â–∏ –≤ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å
    if '–ú–ï–ù–Æ –ù–ê –î–ï–ù–¨' in text:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞–∫–∞ –∏ –æ–±–µ–¥–∞
        import re
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≤—Ç—Ä–∞–∫–æ–º –∏ –æ–±–µ–¥–æ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        text = re.sub(r'(üç≥ –ó–∞–≤—Ç—Ä–∞–∫:.*?)\n(?=üç≤ –û–±–µ–¥:)', r'\1\n\n', text)
        text = re.sub(r'(üç≤ –û–±–µ–¥:.*?)\n(?=üçΩÔ∏è –£–∂–∏–Ω:)', r'\1\n\n', text)

    return text

def generate_weekly_menu(preferences):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        logging.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ DeepSeek...")
        client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é (7 –¥–Ω–µ–π) –¥–ª—è —Å–µ–º—å–∏ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}.

–ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º, –ø–æ–ª–µ–∑–Ω—ã–º –∏ –≤–∫—É—Å–Ω—ã–º –∏ –ª–µ–≥–∫–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —É–∫–∞–∂–∏:
1. –ó–∞–≤—Ç—Ä–∞–∫
2. –û–±–µ–¥  
3. –£–∂–∏–Ω

–ü–æ—Å–ª–µ –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

–í–ê–ñ–ù–û: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —Å–∏–º–≤–æ–ª—ã # –∏ * –≤ –æ—Ç–≤–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∏—Ä–µ (-) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ:
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:
- –ó–∞–≤—Ç—Ä–∞–∫: [–±–ª—é–¥–æ]
- –û–±–µ–¥: [–±–ª—é–¥–æ]
- –£–∂–∏–Ω: [–±–ª—é–¥–æ]

[–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π]

–°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö:
- [–ø—Ä–æ–¥—É–∫—Ç] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- [–ø—Ä–æ–¥—É–∫—Ç] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
[–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ]"""

        return _generate_menu(client, prompt)

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DeepSeek: {str(e)}"
        logging.error(error_msg)
        return error_msg

def generate_daily_menu(preferences):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å"""
    try:
        logging.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ DeepSeek...")
        client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–ª—è —Å–µ–º—å–∏ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}.

–ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º, –≤–∫—É—Å–Ω—ã–º –∏ –ª–µ–≥–∫–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è. –£–∫–∞–∂–∏:
1. –ó–∞–≤—Ç—Ä–∞–∫
2. –û–±–µ–¥  
3. –£–∂–∏–Ω

–ü–æ—Å–ª–µ –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

–í–ê–ñ–ù–û: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô —Å–∏–º–≤–æ–ª—ã # –∏ * –≤ –æ—Ç–≤–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∏—Ä–µ (-) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–ú–ï–ù–Æ –ù–ê –î–ï–ù–¨:
- –ó–∞–≤—Ç—Ä–∞–∫: [–±–ª—é–¥–æ]
- –û–±–µ–¥: [–±–ª—é–¥–æ]
- –£–∂–∏–Ω: [–±–ª—é–¥–æ]

–°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö:
- [–ø—Ä–æ–¥—É–∫—Ç] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
- [–ø—Ä–æ–¥—É–∫—Ç] - [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]
[–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ]"""

        return _generate_menu(client, prompt)

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DeepSeek: {str(e)}"
        logging.error(error_msg)
        return error_msg

def _generate_menu(client, prompt):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é"""

    logging.info("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ DeepSeek...")

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
    models_to_try = ["deepseek-chat", "deepseek-coder"]

    for model in models_to_try:
        try:
            logging.info(f"–ü—Ä–æ–±—É—é –º–æ–¥–µ–ª—å: {model}")
            response = client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            break
        except Exception as model_error:
            logging.warning(f"–ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {model_error}")
            if model == models_to_try[-1]:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å
                raise model_error
            continue

    menu_content = response.choices[0].message.content
    logging.info(f"–ú–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞: {len(menu_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    return menu_content

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
user_timers = {}

async def auto_generate_menu(chat_id, menu_type, bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"""
    await asyncio.sleep(60)  # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if chat_id not in user_timers or user_timers[chat_id] != 'waiting':
        return

    logging.info(f"–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –¥–ª—è chat_id {chat_id}")

    keyboard = [
        [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await bot.send_message(
        chat_id=chat_id,
        text="–Ø –ø–æ–Ω—è–ª, —Å–µ–π—á–∞—Å –≤—Å—ë —Å–¥–µ–ª–∞—é! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ...",
        reply_markup=reply_markup
    )

    try:
        preferences = "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ"

        if menu_type == "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è":
            menu_text = generate_daily_menu(preferences)
        else:
            menu_text = generate_weekly_menu(preferences)

        formatted_menu = format_menu_text(menu_text)

        if len(formatted_menu) > 4096:
            parts = [formatted_menu[i:i+4096] for i in range(0, len(formatted_menu), 4096)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await bot.send_message(chat_id=chat_id, text=f"–ß–∞—Å—Ç—å {i+1}:\n{part}", reply_markup=reply_markup)
                else:
                    await bot.send_message(chat_id=chat_id, text=f"–ß–∞—Å—Ç—å {i+1}:\n{part}")
        else:
            await bot.send_message(chat_id=chat_id, text=formatted_menu, reply_markup=reply_markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é",
            reply_markup=reply_markup
        )

    # –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    if chat_id in user_timers:
        del user_timers[chat_id]



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logging.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.first_name} (ID: {update.effective_chat.id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")

    await update.message.reply_text(
        'üë®‚Äçüç≥ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–ø–æ–≤–∞—Ä.\n\n'
        'üçΩÔ∏è –ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n\n'
        '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–±–µ–∑ –º—è—Å–∞", "–ª—é–±–ª—é —Ä—ã–±—É", "–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π") –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!\n\n'
        'üîß –ö–æ–º–∞–Ω–¥—ã:\n'
        '/command1 - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n'
        '/command2 - –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n'
        f'üî¢ Session ID: {SESSION_ID}\n'
        f'‚è∞ –ó–∞–ø—É—â–µ–Ω: {BOT_START_TIME}',
        reply_markup=reply_markup
    )

async def command1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    keyboard = [
        [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
        "üí° –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É - –∏ —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!",
        reply_markup=reply_markup
    )
    context.user_data['menu_type'] = "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    chat_id = update.effective_chat.id
    user_timers[chat_id] = 'waiting'
    asyncio.create_task(auto_generate_menu(chat_id, "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è", context.bot))
    logging.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} (–∫–æ–º–∞–Ω–¥–∞ /command1)")

async def command2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    keyboard = [
        [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é.\n\n"
        "üí° –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É - –∏ —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!",
        reply_markup=reply_markup
    )
    context.user_data['menu_type'] = "üìÖ –ù–µ–¥–µ–ª—è"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    chat_id = update.effective_chat.id
    user_timers[chat_id] = 'waiting'
    asyncio.create_task(auto_generate_menu(chat_id, "üìÖ –ù–µ–¥–µ–ª—è", context.bot))
    logging.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} (–∫–æ–º–∞–Ω–¥–∞ /command2)")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    uptime_seconds = int(time.time() - time.mktime(time.strptime(BOT_START_TIME, '%Y-%m-%d %H:%M:%S')))
    uptime_minutes = uptime_seconds // 60
    uptime_hours = uptime_minutes // 60
    uptime_days = uptime_hours // 24
    
    uptime_str = f"{uptime_days}–¥ {uptime_hours%24}—á {uptime_minutes%60}–º {uptime_seconds%60}—Å"
    
    active_timers = len([k for k, v in user_timers.items() if v == 'waiting'])
    
    status_text = (
        f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**:\n\n"
        f"üî¢ Session ID: `{SESSION_ID}`\n"
        f"‚è∞ –ó–∞–ø—É—â–µ–Ω: `{BOT_START_TIME}`\n"
        f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: `{current_time}`\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `{uptime_str}`\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: `{active_timers}`\n"
        f"üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: `{len(user_timers)}`"
    )
    
    logging.info(f"üìä –ó–∞–ø—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_chat.id}")
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):

    message_text = update.message.text
    chat_id = update.effective_chat.id

    keyboard = [
        [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
    if message_text in ["üìÖ –ù–µ–¥–µ–ª—è", "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è"]:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏.\n\n"
            "üí° –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É - –∏ —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!",
            reply_markup=reply_markup
        )
        context.user_data['menu_type'] = message_text

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        user_timers[chat_id] = 'waiting'
        asyncio.create_task(auto_generate_menu(chat_id, message_text, context.bot))
        logging.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è chat_id {chat_id}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
    preferences = message_text.lower()
    menu_type = context.user_data.get('menu_type', 'üìÖ –ù–µ–¥–µ–ª—è')

    # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
    if chat_id in user_timers:
        user_timers[chat_id] = 'answered'
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª, –æ—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è chat_id {chat_id}")



    if menu_type == "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è":
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...", reply_markup=reply_markup)
        menu_text = generate_daily_menu(preferences)
    else:
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...", reply_markup=reply_markup)
        menu_text = generate_weekly_menu(preferences)

    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
        formatted_menu = format_menu_text(menu_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
        if len(formatted_menu) > 4096:
            parts = [formatted_menu[i:i+4096] for i in range(0, len(formatted_menu), 4096)]
            for i, part in enumerate(parts):
                if i == len(parts) - 1:
                    await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}:\n{part}", reply_markup=reply_markup)
                else:
                    await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}:\n{part}")
        else:
            await update.message.reply_text(formatted_menu, reply_markup=reply_markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é", reply_markup=reply_markup)

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    sys.exit(0)

def main():
    if not TELEGRAM_TOKEN:
        print("–û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        sys.exit(1)

    if not DEEPSEEK_API_KEY:
        print("–û–®–ò–ë–ö–ê: DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        sys.exit(1)

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –Ω–∞ Replit...")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {BOT_START_TIME}")
    print(f"üî¢ Session ID: {SESSION_ID}")
    print(f"üîë Telegram Token: {TELEGRAM_TOKEN[:20] if TELEGRAM_TOKEN else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}...")
    print(f"üîë DeepSeek API Key: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if DEEPSEEK_API_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('command1', command1))
    app.add_handler(CommandHandler('command2', command2))
    app.add_handler(CommandHandler('status', status))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    
    # –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ –¥–ª—è Replit
    print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –≤ polling —Ä–µ–∂–∏–º–µ")
    logging.info(f"üîÑ Polling –∑–∞–ø—É—â–µ–Ω. Session ID: {SESSION_ID}")
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        main()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        sys.exit(1)