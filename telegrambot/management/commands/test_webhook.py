from django.core.management.base import BaseCommand
from telegrambot.services import BOT_TOKEN
import requests
import json

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram'

    def add_arguments(self, parser):
        parser.add_argument(
            '--set-webhook',
            action='store_true',
            help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook'
        )
        parser.add_argument(
            '--delete-webhook',
            action='store_true',
            help='–£–¥–∞–ª–∏—Ç—å webhook'
        )
        parser.add_argument(
            '--get-updates',
            action='store_true',
            help='–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
        )
        parser.add_argument(
            '--get-webhook-info',
            action='store_true',
            help='–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook'
        )

    def handle(self, *args, **options):
        if not BOT_TOKEN:
            self.stdout.write(self.style.ERROR('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!'))
            return

        if options['set_webhook']:
            self.set_webhook()
        elif options['delete_webhook']:
            self.delete_webhook()
        elif options['get_updates']:
            self.get_updates()
        elif options['get_webhook_info']:
            self.get_webhook_info()
        else:
            self.show_help()

    def set_webhook(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
        webhook_url = "https://programism.ru/telegram/webhook/"
        
        try:
            response = requests.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                json={'url': webhook_url}
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    self.stdout.write(
                        self.style.SUCCESS(f'‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}')
                    )
                else:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result}')
                    )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )

    def delete_webhook(self):
        """–£–¥–∞–ª—è–µ—Ç webhook"""
        try:
            response = requests.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook"
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    self.stdout.write(
                        self.style.SUCCESS('‚úÖ Webhook —É–¥–∞–ª–µ–Ω')
                    )
                else:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {result}')
                    )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )

    def get_updates(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            response = requests.get(
                f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    updates = result.get('result', [])
                    if updates:
                        self.stdout.write(
                            self.style.SUCCESS(f'üì® –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:')
                        )
                        for update in updates:
                            self.stdout.write(f'  - {update}')
                    else:
                        self.stdout.write(
                            self.style.WARNING('‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç')
                        )
                else:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {result}')
                    )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )

    def get_webhook_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
        try:
            response = requests.get(
                f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    info = result.get('result', {})
                    self.stdout.write(
                        self.style.SUCCESS('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:')
                    )
                    self.stdout.write(f'  URL: {info.get("url", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")}')
                    self.stdout.write(f'  –û—à–∏–±–∫–∏: {info.get("last_error_message", "–ù–µ—Ç")}')
                    self.stdout.write(f'  –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {info.get("last_error_date", "–ù–µ—Ç")}')
                    self.stdout.write(f'  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: {info.get("pending_update_count", 0)}')
                else:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result}')
                    )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        self.stdout.write(
            self.style.SUCCESS('üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å webhook:')
        )
        self.stdout.write('  python manage.py test_webhook --set-webhook')
        self.stdout.write('  python manage.py test_webhook --delete-webhook')
        self.stdout.write('  python manage.py test_webhook --get-updates') 