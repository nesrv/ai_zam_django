from django.core.management.base import BaseCommand
from telegrambot.services import check_bot_token, send_telegram_message, BOT_TOKEN
from telegrambot.models import TelegramUser

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test-token',
            action='store_true',
            help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞',
        )
        parser.add_argument(
            '--send-test',
            action='store_true',
            help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
        )

    def handle(self, *args, **options):
        if options['test_token']:
            self.stdout.write('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...')
            is_valid, bot_info = check_bot_token(BOT_TOKEN)
            if is_valid:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ë–æ—Ç: {bot_info.get("first_name")} (@{bot_info.get("username")})')
                )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {bot_info}')
                )
        
        if options['send_test']:
            self.stdout.write('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            is_valid, bot_info = check_bot_token(BOT_TOKEN)
            if not is_valid:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {bot_info}')
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = TelegramUser.objects.filter(is_active=True).first()
            if not user:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
                )
                return
            
            self.stdout.write(f'–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} ({user.first_name})...')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = send_telegram_message(user.telegram_id, "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI-ZAM –±–æ—Ç–∞!")
            
            if result and result.get('ok'):
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
                )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}')
                )
        
        if not options['test_token'] and not options['send_test']:
            self.stdout.write('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:')
            self.stdout.write('  python manage.py test_bot --test-token')
            self.stdout.write('  python manage.py test_bot --send-test') 