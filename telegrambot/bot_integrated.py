import logging
import os
import asyncio
import uuid
import time
import django
from datetime import datetime
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import Conflict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ai_zam.settings')
django.setup()

# –ò–º–ø–æ—Ä—Ç—ã Django –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from django.db import connection
from .models import TelegramUser, TelegramMessage

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
DEEPSEEK_BASE_URL = "https://api.deepseek.com"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SESSION_ID = str(uuid.uuid4())[:8]
BOT_START_TIME = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
user_timers = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=f'%(asctime)s - [{SESSION_ID}] - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_or_create_telegram_user(telegram_data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –≤ Django"""
    telegram_id = telegram_data['id']
    username = telegram_data.get('username')
    first_name = telegram_data.get('first_name')
    last_name = telegram_data.get('last_name')
    
    user, created = TelegramUser.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
        }
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not created:
        user.username = username
        user.first_name = first_name
        user.last_name = last_name
        user.save()
    
    return user

def save_telegram_message(user, content, message_type='text', is_from_user=True):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Django –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    return TelegramMessage.objects.create(
        user=user,
        content=content,
        message_type=message_type,
        is_from_user=is_from_user
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è")]
    ], resize_keyboard=True, one_time_keyboard=False)

def generate_menu(preferences, menu_type="–Ω–µ–¥–µ–ª—è"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é —á–µ—Ä–µ–∑ DeepSeek API"""
    try:
        logger.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ DeepSeek...")
        client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

        if menu_type == "—Å–µ–≥–æ–¥–Ω—è":
            prompt = f"""–°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–ª—è —Å–µ–º—å–∏ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}.
            –£–∫–∞–∂–∏ –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∏—Ä–µ (-) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤."""
        else:
            prompt = f"""–°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è —Å–µ–º—å–∏ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}.
            –£–∫–∞–∂–∏ –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∏—Ä–µ (-) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤."""

        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=2000
        )

        menu_content = response.choices[0].message.content
        if menu_content:
            logger.info(f"–ú–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞: {len(menu_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return menu_content

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DeepSeek: {str(e)}"
        logger.error(error_msg)
        return error_msg

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = get_keyboard()
    user = update.effective_user
    chat_id = update.effective_chat.id

    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Django
    try:
        django_user = get_or_create_telegram_user({
            'id': chat_id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        save_telegram_message(django_user, "/start", "command", True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Django: {e}")

    await update.message.reply_text(
        f'*üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä!* üéâ\n\n'
        f'üçΩÔ∏è *–ì–æ—Ç–æ–≤ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—á—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å!*\n'
        f'‚ú® –°–æ–∑–¥–∞–º –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n'
        f'üéØ –£—á—Ç—É –≤—Å–µ —Ç–≤–æ–∏ –≤–∫—É—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n\n'
        f'üöÄ *–ù–∞—á–Ω–µ–º –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ?*\n\n'
        f'üîß *–ú–∞–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã:*\n'
        f'üç≥ `/today` - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è *(–±—ã—Å—Ç—Ä–æ –∏ –≤–∫—É—Å–Ω–æ)*\n'
        f'üìÖ `/week` - –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é *(–ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è)*\n'
        f'üìä `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n'
        f'‚ùì `/help` - –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n\n'
        f'üí° *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É!*\n\n'
        f'üî¢ Session ID: `{SESSION_ID}`\n'
        f'‚è∞ –ó–∞–ø—É—â–µ–Ω: `{BOT_START_TIME}`',
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üé≠ *–ö–£–õ–ò–ù–ê–†–ù–´–ô –¢–ï–ê–¢–†* - –¢–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã:

üç≥ *`/today`* - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
   –ë—ã—Å—Ç—Ä–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è

üìÖ *`/week`* - –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é  
   –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π

üìä *`/stats`* - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
   –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã

‚ùì *`/help`* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
   –í—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è

üéØ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É
2. –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è *(–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ª—é–±–ª—é —Ä—ã–±—É", "–±–µ–∑ –º—è—Å–∞", "–±—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ")*
3. –ü–æ–ª—É—á–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é! ‚ú®
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def today_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    keyboard = get_keyboard()
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    await update.message.reply_text(
        f"üç≥ *{user.first_name}, –≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!*\n\n"
        f"‚ú® *–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:*\n"
        f"‚Ä¢ –õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        f"‚Ä¢ –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
        f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É\n"
        f"‚Ä¢ –õ—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    context.user_data['menu_type'] = "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è"

async def week_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    keyboard = get_keyboard()
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    await update.message.reply_text(
        f"üìÖ *{user.first_name}, –ø–ª–∞–Ω–∏—Ä—É—é —Ç–≤–æ–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é!*\n\n"
        f"üåü *–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö:*\n"
        f"‚Ä¢ –õ—é–±–∏–º—ã–µ –∫—É—Ö–Ω–∏ –º–∏—Ä–∞\n"
        f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—Ä–∞–≤—è—Ç—Å—è/–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è\n"
        f"‚Ä¢ –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏\n"
        f"‚Ä¢ –ë—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    context.user_data['menu_type'] = "üìÖ –ù–µ–¥–µ–ª—è"

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Django
    try:
        total_users = TelegramUser.objects.count()
        active_users = TelegramUser.objects.filter(is_active=True).count()
        total_messages = TelegramMessage.objects.count()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Django: {e}")
        total_users = 0
        active_users = 0
        total_messages = 0
    
    stats_text = (
        f"üìä *–ö–£–õ–ò–ù–ê–†–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê* üìä\n\n"
        f"ü§ñ *–ë–æ—Ç-—à–µ—Ñ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        f"üî¢ Session ID: `{SESSION_ID}`\n"
        f"‚è∞ –ó–∞–ø—É—â–µ–Ω: `{BOT_START_TIME}`\n"
        f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: `{current_time}`\n\n"
        f"üë• *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        f"üë®‚Äçüç≥ –ü–æ–≤–∞—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: `{total_users}`\n"
        f"üçΩÔ∏è –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ: `{total_messages}`\n"
        f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{active_users}`\n\n"
        f"üí° *–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —à–µ–¥–µ–≤—Ä—ã!* ‚ú®"
    )
    
    logger.info(f"üìä –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_chat.id}")
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text
    chat_id = update.effective_chat.id
    user = update.effective_user
    keyboard = get_keyboard()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Django
    try:
        django_user = get_or_create_telegram_user({
            'id': chat_id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        })
        
        save_telegram_message(django_user, message_text, "text", True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Django: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
    if message_text in ["üìÖ –ù–µ–¥–µ–ª—è", "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è"]:
        await update.message.reply_text(
            "*–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏.*",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        context.user_data['menu_type'] = message_text
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
    preferences = message_text.lower()
    menu_type = context.user_data.get('menu_type', 'üìÖ –ù–µ–¥–µ–ª—è')

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    if menu_type == "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è":
        await update.message.reply_text("*–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...* üç≥", reply_markup=keyboard, parse_mode='Markdown')
        menu_text = generate_menu(preferences, "—Å–µ–≥–æ–¥–Ω—è")
    else:
        await update.message.reply_text("*–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...* üìÖ", reply_markup=keyboard, parse_mode='Markdown')
        menu_text = generate_menu(preferences, "–Ω–µ–¥–µ–ª—è")

    try:
        await update.message.reply_text(
            f"üé® *–ö–£–õ–ò–ù–ê–†–ù–û–ï –ú–ï–ù–Æ* üé®\n\n{menu_text}\n\n‚ú® *–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!* ‚ú®",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ Django
        try:
            save_telegram_message(django_user, menu_text, "text", False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ Django: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("*–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é* ‚ùå", reply_markup=keyboard, parse_mode='Markdown')

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    if isinstance(context.error, Conflict):
        logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")

def setup_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("today", today_menu))
    application.add_handler(CommandHandler("week", week_menu))
    application.add_handler(CommandHandler("stats", stats))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    if not TELEGRAM_TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False

    if not DEEPSEEK_API_KEY:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω DeepSeek API –∫–ª—é—á! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DEEPSEEK_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    return True

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not validate_config():
        return

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {BOT_START_TIME}")
    print(f"üî¢ Session ID: {SESSION_ID}")
    print(f"üîë Telegram Token: {TELEGRAM_TOKEN[:20] if TELEGRAM_TOKEN else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}...")
    print(f"üîë DeepSeek API Key: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if DEEPSEEK_API_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    setup_handlers(application)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )
    except Conflict as e:
        logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.info("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 