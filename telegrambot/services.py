import os
import logging
import requests
import json
from datetime import datetime
from dotenv import load_dotenv
from .models import TelegramUser, TelegramMessage
from ai.services import generate_weekly_menu, generate_daily_menu, format_menu_text, get_ai_response

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É: TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")

logger = logging.getLogger(__name__)

def send_telegram_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        if not TELEGRAM_TOKEN:
            logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
            
        url = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        if reply_markup:
            payload['reply_markup'] = reply_markup
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: chat_id={chat_id}, text={text[:50]}...")
        
        response = requests.post(url, data=payload)
        response.raise_for_status()
        
        result = response.json()
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram API: {result}")
        
        return result
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API: {e}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return None

def get_or_create_telegram_user(telegram_data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    telegram_id = telegram_data['id']
    username = telegram_data.get('username')
    first_name = telegram_data.get('first_name')
    last_name = telegram_data.get('last_name')
    
    user, created = TelegramUser.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
        }
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not created:
        user.username = username
        user.first_name = first_name
        user.last_name = last_name
        user.save()
    
    return user

def save_telegram_message(user, content, message_type='text', is_from_user=True):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    return TelegramMessage.objects.create(
        user=user,
        content=content,
        message_type=message_type,
        is_from_user=is_from_user
    )

def handle_start_command(user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        f"üë®‚Äçüç≥ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–ø–æ–≤–∞—Ä.\n\n"
        "üçΩÔ∏è –ü–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫.\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–±–µ–∑ –º—è—Å–∞\", \"–ª—é–±–ª—é —Ä—ã–±—É\", \"–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\") –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!\n\n"
        "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
        "/menu_today - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/menu_week - –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/chat - –û–±—â–∏–π —á–∞—Ç —Å AI\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = {
        "keyboard": [
            [{"text": "üç≥ –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å"}, {"text": "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"}],
            [{"text": "üí¨ –û–±—â–∏–π —á–∞—Ç"}, {"text": "‚ùì –ü–æ–º–æ—â—å"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }
    
    return welcome_text, keyboard

def handle_menu_today_command(user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu_today"""
    text = (
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
        "üí° –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\"!"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –º–æ–¥–µ–ª—å)
    return text, None

def handle_menu_week_command(user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu_week"""
    text = (
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é.\n\n"
        "üí° –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\"!"
    )
    
    return text, None

def handle_help_command(user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**\n\n"
        "üçΩÔ∏è **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é:**\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üç≥ –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å\" –∏–ª–∏ \"üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é\"\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ\", \"–±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞\", \"–ª—é–±–ª—é —Ä—ã–±—É\")\n\n"
        "üí¨ **–û–±—â–∏–π —á–∞—Ç:**\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üí¨ –û–±—â–∏–π —á–∞—Ç\"\n"
        "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n\n"
        "üîß **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu_today - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/menu_week - –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "/chat - –û–±—â–∏–π —á–∞—Ç\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üí° **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:**\n"
        "‚Ä¢ \"–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ\"\n"
        "‚Ä¢ \"–±–µ–∑ –º—è—Å–∞, –ª—é–±–ª—é —Ä—ã–±—É\"\n"
        "‚Ä¢ \"–Ω–∏–∑–∫–æ–∫–∞–ª–æ—Ä–∏–π–Ω–æ–µ –º–µ–Ω—é\"\n"
        "‚Ä¢ \"–±—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ\"\n"
        "‚Ä¢ \"—ç–∫–æ–Ω–æ–º–Ω–æ–µ –º–µ–Ω—é\""
    )
    
    return help_text, None

def handle_text_message(user, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –º–µ–Ω—é
    if text in ["üç≥ –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å", "üìÖ –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"]:
        if text == "üç≥ –ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å":
            return handle_menu_today_command(user)
        else:
            return handle_menu_week_command(user)
    
    elif text == "üí¨ –û–±—â–∏–π —á–∞—Ç":
        return "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.", None
    
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        return handle_help_command(user)
    
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_messages = list(user.messages.filter(is_from_user=True).order_by('-created_at')[:3])
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ –º–µ–Ω—é, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
        if recent_messages and any("–º–µ–Ω—é" in msg.content.lower() for msg in recent_messages):
            if any("–Ω–µ–¥–µ–ª—é" in msg.content.lower() for msg in recent_messages):
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é
                menu_text = generate_weekly_menu(text)
                formatted_menu = format_menu_text(menu_text)
                return formatted_menu, None
            else:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å
                menu_text = generate_daily_menu(text)
                formatted_menu = format_menu_text(menu_text)
                return formatted_menu, None
        else:
            # –û–±—â–∏–π —á–∞—Ç —Å AI
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º QuerySet –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
                messages_list = list(recent_messages) if recent_messages else []
                ai_response = get_ai_response(text, messages_list)
                return ai_response, None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ AI —á–∞—Ç–µ: {e}")
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", None

def process_telegram_update(update_data):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}")
        
        message = update_data.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '')
        from_user = message.get('from', {})
        
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: chat_id={chat_id}, text='{text}', from_user={from_user}")
        
        if not chat_id or not text:
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: chat_id={chat_id}, text='{text}'")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            user = get_or_create_telegram_user(from_user)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω/—Å–æ–∑–¥–∞–Ω: {user}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            save_telegram_message(user, text, 'text', True)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        try:
            if text.startswith('/'):
                if text == '/start':
                    response_text, keyboard = handle_start_command(user)
                elif text == '/menu_today':
                    response_text, keyboard = handle_menu_today_command(user)
                elif text == '/menu_week':
                    response_text, keyboard = handle_menu_week_command(user)
                elif text == '/help':
                    response_text, keyboard = handle_help_command(user)
                else:
                    response_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
                    keyboard = None
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                response_text, keyboard = handle_text_message(user, text)
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: response_text='{response_text[:50]}...', keyboard={keyboard is not None}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        if response_text:
            try:
                save_telegram_message(user, response_text, 'text', False)
                logger.info("–û—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞: {e}")
                # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, text='{response_text[:50]}...'")
            result = send_telegram_message(chat_id, response_text, keyboard)
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result is None:
                logger.error("send_telegram_message –≤–µ—Ä–Ω—É–ª None")
                return False
            elif isinstance(result, dict):
                if result.get('ok'):
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    return True
                else:
                    logger.error(f"Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result}")
                    return False
            else:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)} = {result}")
                return False
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False 