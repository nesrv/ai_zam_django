import os
import logging
import requests
import json
from datetime import datetime
from dotenv import load_dotenv
from .models import TelegramUser, TelegramMessage
from ai.services import get_ai_response
import asyncio
import threading
from django.conf import settings
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    CallbackQueryHandler,
    ConversationHandler,
)
from asgiref.sync import sync_to_async

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫—É: TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7836693206:AAE_wRnOiWm0xhRlP7cr8Q0AvaPEgZCgTFw"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–æ–≤
ne_srv_bot_app = None

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
@sync_to_async
def get_or_create_telegram_user_async(telegram_id, username, first_name, last_name):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user, created = TelegramUser.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
        }
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not created:
        user.username = username
        user.first_name = first_name
        user.last_name = last_name
        user.is_active = True
        user.save()
    
    return user

@sync_to_async
def save_telegram_message_async(user, content, message_type='text', is_from_user=True):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return TelegramMessage.objects.create(
        user=user,
        content=content,
        message_type=message_type,
        is_from_user=is_from_user
    )

def check_bot_token(token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    try:
        url = f'https://api.telegram.org/bot{token}/getMe'
        response = requests.get(url)
        response.raise_for_status()
        
        result = response.json()
        if result.get('ok'):
            bot_info = result.get('result', {})
            logger.info(f"–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω: {bot_info.get('first_name')} (@{bot_info.get('username')})")
            return True, bot_info
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {result}")
            return False, result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞: {e}")
        return False, str(e)

def send_telegram_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_TOKEN –≤–º–µ—Å—Ç–æ TELEGRAM_TOKEN
        token = BOT_TOKEN or TELEGRAM_TOKEN
        if not token:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        if not hasattr(send_telegram_message, '_token_checked'):
            is_valid, bot_info = check_bot_token(token)
            if not is_valid:
                logger.error(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {bot_info}")
                return None
            send_telegram_message._token_checked = True
            
        url = f'https://api.telegram.org/bot{token}/sendMessage'
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        if reply_markup:
            payload['reply_markup'] = json.dumps(reply_markup)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: chat_id={chat_id}, text={text[:50]}...")
        
        response = requests.post(url, data=payload)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏
        response_text = response.text
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Telegram API (—Å—Ç–∞—Ç—É—Å {response.status_code}): {response_text}")
        
        if response.status_code == 400:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            try:
                error_data = response.json()
                error_code = error_data.get('error_code', 'unknown')
                description = error_data.get('description', 'No description')
                logger.error(f"–û—à–∏–±–∫–∞ 400: –∫–æ–¥={error_code}, –æ–ø–∏—Å–∞–Ω–∏–µ={description}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if error_code == 400:
                    if "chat not found" in description.lower():
                        logger.error(f"–ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                    elif "user not found" in description.lower():
                        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    elif "bot was blocked" in description.lower():
                        logger.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {chat_id}")
                    else:
                        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ 400: {description}")
                
                return {'ok': False, 'error_code': error_code, 'description': description}
            except:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ: {response_text}")
                return {'ok': False, 'error': 'Failed to parse error response'}
        
        response.raise_for_status()
        
        result = response.json()
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API: {result}")
        
        return result
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API: {e}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram: {e}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return None

def handle_start_command(user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! –Ø –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "üìã –ú–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã!\n\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
        "üîß –ö–æ–º–∞–Ω–¥—ã:\n"
        "/documents - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "/chat - –û–±—â–∏–π —á–∞—Ç —Å AI\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    keyboard = {
        "keyboard": [
            [{"text": "üí¨ –û–±—â–∏–π —á–∞—Ç"}, {"text": "üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"}],
            [{"text": "‚ùì –ü–æ–º–æ—â—å"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }
    return welcome_text, keyboard

def handle_help_command(user):
    help_text = (
        "üìã **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
        "üìÑ **–õ–∏–º–∏—Ç–Ω–æ-–∑–∞–±–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ (–õ–ó–ö)**\n"
        "‚Ä¢ –î–ª—è —É—á–µ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n\n"
        "üìä **–í–µ–¥–æ–º–æ—Å—Ç—å –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç (–í–û–†)**\n"
        "‚Ä¢ –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞/—ç—Ç–∞–ø —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞\n\n"
        "üìã **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¢–ó)**\n"
        "‚Ä¢ –î–ª—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤/—Å–∏—Å—Ç–µ–º\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–∫—Ç/—Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "‚ùì **–û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞**\n"
        "‚Ä¢ –î–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ–Ω–¥–µ—Ä–∞–º\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç\n\n"
        "üîç **–ê–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç**\n"
        "‚Ä¢ –î–ª—è –ø—Ä–∏–µ–º–∫–∏ —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç\n\n"
        "üìù **–ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É**\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ '–õ–ó–ö –Ω–∞ –±–µ—Ç–æ–Ω –ú300, –∞—Ä–º–∞—Ç—É—Ä–∞ –ê500–°'\n"
        "‚Ä¢ '–í–û–† –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞'\n"
        "‚Ä¢ '–¢–ó –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è'"
    )
    return help_text, None

def handle_documents_command(user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    text = (
        "üìã **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
        "üìÑ **–õ–∏–º–∏—Ç–Ω–æ-–∑–∞–±–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ (–õ–ó–ö)**\n"
        "‚Ä¢ –î–ª—è —É—á–µ—Ç–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞/–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n\n"
        "üìä **–í–µ–¥–æ–º–æ—Å—Ç—å –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç (–í–û–†)**\n"
        "‚Ä¢ –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞/—ç—Ç–∞–ø —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞\n\n"
        "üìã **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¢–ó)**\n"
        "‚Ä¢ –î–ª—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤/—Å–∏—Å—Ç–µ–º\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–∫—Ç/—Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "‚ùì **–û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞**\n"
        "‚Ä¢ –î–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Ç–µ–Ω–¥–µ—Ä–∞–º\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç\n\n"
        "üîç **–ê–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç**\n"
        "‚Ä¢ –î–ª—è –ø—Ä–∏–µ–º–∫–∏ —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç\n\n"
        "üìù **–ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É**\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ '–õ–ó–ö –Ω–∞ –±–µ—Ç–æ–Ω –ú300, –∞—Ä–º–∞—Ç—É—Ä–∞ –ê500–°'\n"
        "‚Ä¢ '–í–û–† –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞'\n"
        "‚Ä¢ '–¢–ó –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è'"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    keyboard = {
        "keyboard": [
            [{"text": "üìÑ –õ–ó–ö"}, {"text": "üìä –í–û–†"}],
            [{"text": "üìã –¢–ó"}, {"text": "‚ùì –û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç"}],
            [{"text": "üîç –ê–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç"}, {"text": "üìù –ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞"}],
            [{"text": "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }
    
    return text, keyboard

def handle_text_message(user, text):
    if text == "üí¨ –û–±—â–∏–π —á–∞—Ç":
        return "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.", None
    elif text == "üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
        return handle_documents_command(user)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        return handle_help_command(user)
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return handle_start_command(user)
    elif text in ["üìÑ –õ–ó–ö", "üìä –í–û–†", "üìã –¢–ó", "‚ùì –û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç", "üîç –ê–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç", "üìù –ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞"]:
        document_type = {
            "üìÑ –õ–ó–ö": "–ª–∏–º–∏—Ç–Ω–æ-–∑–∞–±–æ—Ä–Ω—É—é –∫–∞—Ä—Ç—É (–õ–ó–ö)",
            "üìä –í–û–†": "–≤–µ–¥–æ–º–æ—Å—Ç—å –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç (–í–û–†)",
            "üìã –¢–ó": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¢–ó)",
            "‚ùì –û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç": "–æ–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞",
            "üîç –ê–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç": "–∞–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç",
            "üìù –ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞": "–ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å–∫—É –∫ –ø—Ä–æ–µ–∫—Ç—É"
        }
        doc_name = document_type.get(text, "–¥–æ–∫—É–º–µ–Ω—Ç")
        response_text = (
            f"üìã **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {doc_name}**\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {doc_name.lower()}.\n\n"
            "üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        )
        if text == "üìÑ –õ–ó–ö":
            response_text += "‚Ä¢ '–õ–ó–ö –Ω–∞ –±–µ—Ç–æ–Ω –ú300, –∞—Ä–º–∞—Ç—É—Ä–∞ –ê500–°, –æ–ø–∞–ª—É–±–∫–∞ —â–∏—Ç–æ–≤–∞—è'\n‚Ä¢ '–õ–∏–º–∏—Ç–Ω–æ-–∑–∞–±–æ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –∫–∏—Ä–ø–∏—á–Ω–æ–π –∫–ª–∞–¥–∫–∏'"
        elif text == "üìä –í–û–†":
            response_text += "‚Ä¢ '–í–û–† –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∂–∏–ª–æ–≥–æ –¥–æ–º–∞'\n‚Ä¢ '–í–µ–¥–æ–º–æ—Å—Ç—å –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã'"
        elif text == "üìã –¢–ó":
            response_text += "‚Ä¢ '–¢–ó –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è'\n‚Ä¢ '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏'"
        elif text == "‚ùì –û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç":
            response_text += "‚Ä¢ '–û–ø—Ä–æ—Å–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã—Ö —Ä–∞–±–æ—Ç'\n‚Ä¢ '–û–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –æ—Ç–¥–µ–ª–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç'"
        elif text == "üîç –ê–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç":
            response_text += "‚Ä¢ '–ê–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∏'\n‚Ä¢ '–ê–∫—Ç –¥–ª—è –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞'"
        elif text == "üìù –ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞":
            response_text += "‚Ä¢ '–ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–º–∞'\n‚Ä¢ '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞'"
        return response_text, None
    else:
        # –û–±—â–∏–π —á–∞—Ç —Å AI
        try:
            recent_messages = list(user.messages.filter(is_from_user=True).order_by('-created_at')[:3])
            messages_list = list(recent_messages) if recent_messages else []
            ai_response = get_ai_response(text, messages_list)
            return ai_response, None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ AI —á–∞—Ç–µ: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", None

def process_telegram_update(update_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram webhook"""
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}")
        
        message = update_data.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text', '')
        from_user = message.get('from', {})
        
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: chat_id={chat_id}, text='{text}', from_user={from_user}")
        
        if not chat_id or not text:
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: chat_id={chat_id}, text='{text}'")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            if not from_user or 'id' not in from_user:
                logger.error("from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç id, –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            user_data = {
                'id': from_user.get('id'),
                'username': from_user.get('username'),
                'first_name': from_user.get('first_name'),
                'last_name': from_user.get('last_name'),
            }
            user = get_or_create_telegram_user(user_data)
            if not user:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω/—Å–æ–∑–¥–∞–Ω: {user}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            if not user:
                logger.error("user is None, –ø—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
            save_telegram_message(user, text, 'text', True)
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        try:
            if not user:
                logger.error("user is None, –ø—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
                return False
            if text.startswith('/'):
                if text == '/start':
                    response_text, keyboard = handle_start_command(user)
                elif text == '/documents':
                    response_text, keyboard = handle_documents_command(user)
                elif text == '/help':
                    response_text, keyboard = handle_help_command(user)
                else:
                    response_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
                    keyboard = None
            else:
                response_text, keyboard = handle_text_message(user, text)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: response_text='{response_text[:50]}...', keyboard={keyboard is not None}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        if response_text:
            try:
                if not user:
                    logger.error("user is None, –ø—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞")
                else:
                    save_telegram_message(user, response_text, 'text', False)
                    logger.info("–û—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞: {e}")
                # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, text='{response_text[:50]}...'")
            result = send_telegram_message(chat_id, response_text, keyboard)
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result is None:
                logger.error("send_telegram_message –≤–µ—Ä–Ω—É–ª None")
                return False
            elif isinstance(result, dict):
                if result.get('ok'):
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    return True
                else:
                    logger.error(f"Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result}")
                    return False
            else:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)} = {result}")
                return False
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

# ==================== NE_SRV_BOT ====================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
async def ne_srv_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_user = await get_or_create_telegram_user_async(user.id, user.username, user.first_name, user.last_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await save_telegram_message_async(telegram_user, '/start', 'command', True)
    
    response = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_telegram_message_async(telegram_user, response, 'text', False)
    
    await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
async def ne_srv_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_user = await get_or_create_telegram_user_async(user.id, user.username, user.first_name, user.last_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await save_telegram_message_async(telegram_user, '/help', 'command', True)
    
    response = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
    /help - –ø–æ–º–æ—â—å
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_telegram_message_async(telegram_user, response, 'text', False)
    
    await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
async def ne_srv_handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_message = update.message.text.lower()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_user = await get_or_create_telegram_user_async(user.id, user.username, user.first_name, user.last_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_telegram_message_async(telegram_user, update.message.text, 'text', True)
    
    if "–ø—Ä–∏–≤–µ—Ç" in user_message:
        response = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    elif "–ø–æ–∫–∞" in user_message:
        response = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è :)"
    else:
        response = "–Ø –Ω–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π /help"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_telegram_message_async(telegram_user, response, 'text', False)
    
    await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
async def ne_srv_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"NE_SRV_BOT Update {update} caused error {context.error}")

# ==================== –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ====================

def start_ne_srv_bot_in_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def run_bot():
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            app = Application.builder().token(BOT_TOKEN).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            app.add_handler(CommandHandler("start", ne_srv_start_command))
            app.add_handler(CommandHandler("help", ne_srv_help_command))

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            app.add_handler(MessageHandler(filters.TEXT, ne_srv_handle_message))

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
            app.add_error_handler(ne_srv_error)

            logger.info("NE_SRV_BOT –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
            loop.run_until_complete(app.run_polling(poll_interval=3))
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ NE_SRV_BOT: {e}')
    
    thread = threading.Thread(target=run_bot, daemon=True)
    thread.start()
    return thread

def start_all_bots():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç ne_srv_bot –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info("–ó–∞–ø—É—Å–∫ ne_srv_bot...")
    bot_thread = start_ne_srv_bot_in_thread()
    return bot_thread

def get_or_create_telegram_user(telegram_data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    telegram_id = telegram_data['id']
    username = telegram_data.get('username')
    first_name = telegram_data.get('first_name')
    last_name = telegram_data.get('last_name')
    
    user, created = TelegramUser.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={
            'username': username,
            'first_name': first_name,
            'last_name': last_name,
        }
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not created:
        user.username = username
        user.first_name = first_name
        user.last_name = last_name
        user.save()
    
    return user

def save_telegram_message(user, content, message_type='text', is_from_user=True):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    return TelegramMessage.objects.create(
        user=user,
        content=content,
        message_type=message_type,
        is_from_user=is_from_user
    )

def generate_document_with_deepseek(prompt):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é DeepSeek API
    """
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt[:100]}...")
        
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        if "test_mode" in prompt.lower():
            fake_response = f"""
üìã –î–û–ö–£–ú–ï–ù–¢ (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú)

–ó–∞–ø—Ä–æ—Å: {prompt}

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API. –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞:
1. –ó–∞–≥–æ–ª–æ–≤–æ–∫
2. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
3. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

–î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram –±–æ—Ç–∞.
            """
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
            return fake_response.strip()
        
        headers = {
            'Authorization': f'Bearer {settings.DEEPSEEK_API_KEY}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': 'deepseek-chat',
            'messages': [
                {
                    'role': 'system',
                    'content': '–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
                },
                {
                    'role': 'user',
                    'content': prompt
                }
            ],
            'max_tokens': 2000,
            'temperature': 0.7
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é POST –∑–∞–ø—Ä–æ—Å –∫ {settings.DEEPSEEK_BASE_URL}/v1/chat/completions")
        
        try:
            response = requests.post(
                f'{settings.DEEPSEEK_BASE_URL}/v1/chat/completions',
                headers=headers,
                json=data,
                timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
            )
        except requests.exceptions.Timeout:
            error_msg = "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(error_msg)
            return error_msg
        except requests.exceptions.ConnectionError:
            error_msg = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DeepSeek API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
            logger.error(error_msg)
            return error_msg
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API: {str(e)}"
            logger.error(error_msg)
            return error_msg
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek API: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            generated_content = result['choices'][0]['message']['content']
            logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª–∏–Ω–æ–π {len(generated_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return generated_content
        else:
            error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
            logger.error(error_msg)
            return error_msg
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        logger.error(error_msg)
        return error_msg 