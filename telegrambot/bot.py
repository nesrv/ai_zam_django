import logging
import os
import asyncio
import uuid
import time
from datetime import datetime
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import Conflict

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
DEEPSEEK_BASE_URL = "https://api.deepseek.com"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SESSION_ID = str(uuid.uuid4())[:8]
BOT_START_TIME = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
user_timers = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=f'%(asctime)s - [{SESSION_ID}] - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìÖ –ù–µ–¥–µ–ª—è"), KeyboardButton("üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è")]
    ], resize_keyboard=True, one_time_keyboard=False)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é
def format_menu_text(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏ –∏ Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    def escape_problematic_chars(text):
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã"""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å Markdown
        problematic_chars = ['[', ']', '(', ')', '~', '`', '>', '|', '{', '}']
        for char in problematic_chars:
            text = text.replace(char, f'\\{char}')
        return text
    
    # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    text = text.replace('##', '').replace('###', '')
    
    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã —ç–º–æ–¥–∑–∏ (–±–µ–∑ Markdown —Ä–∞–∑–º–µ—Ç–∫–∏)
    replacements = {
        '# ': 'üçΩÔ∏è ', '## ': 'üìÖ ', '### ': 'üç¥ ',
        '- ': '‚Ä¢ ', '* ': '‚Ä¢ ',
        '–ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ': 'üçΩÔ∏è –ú–ï–ù–Æ –ù–ê –ù–ï–î–ï–õ–Æ',
        '–ú–ï–ù–Æ –ù–ê –î–ï–ù–¨': 'üçΩÔ∏è –ú–ï–ù–Æ –ù–ê –î–ï–ù–¨',
        '–°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö': 'üõçÔ∏è –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö',
        '–ó–∞–≤—Ç—Ä–∞–∫:': 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫:', 
        '–û–±–µ–¥:': 'üç≤ –û–±–µ–¥:', 
        '–£–∂–∏–Ω:': 'üçΩÔ∏è –£–∂–∏–Ω:',
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'üìÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–í—Ç–æ—Ä–Ω–∏–∫': 'üìÖ –í—Ç–æ—Ä–Ω–∏–∫',
        '–°—Ä–µ–¥–∞': 'üìÖ –°—Ä–µ–¥–∞',
        '–ß–µ—Ç–≤–µ—Ä–≥': 'üìÖ –ß–µ—Ç–≤–µ—Ä–≥',
        '–ü—è—Ç–Ω–∏—Ü–∞': 'üìÖ –ü—è—Ç–Ω–∏—Ü–∞',
        '–°—É–±–±–æ—Ç–∞': 'üìÖ –°—É–±–±–æ—Ç–∞',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'üìÖ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
        '–î–µ–Ω—å 1': 'üìÖ –î–µ–Ω—å 1',
        '–î–µ–Ω—å 2': 'üìÖ –î–µ–Ω—å 2',
        '–î–µ–Ω—å 3': 'üìÖ –î–µ–Ω—å 3',
        '–î–µ–Ω—å 4': 'üìÖ –î–µ–Ω—å 4',
        '–î–µ–Ω—å 5': 'üìÖ –î–µ–Ω—å 5',
        '–î–µ–Ω—å 6': 'üìÖ –î–µ–Ω—å 6',
        '–î–µ–Ω—å 7': 'üìÖ –î–µ–Ω—å 7'
    }
    
    for old, new in replacements.items():
        text = text.replace(old, new)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    food_emojis = {
        '–∫—É—Ä–∏—Ü–∞': 'üçó', '–º—è—Å–æ': 'ü•©', '—Ä—ã–±–∞': 'üêü', '—Å–≤–∏–Ω–∏–Ω–∞': 'ü•ì', '–≥–æ–≤—è–¥–∏–Ω–∞': 'ü•©',
        '–æ–≤–æ—â–∏': 'ü•¨', '—Ñ—Ä—É–∫—Ç—ã': 'üçé', '—Ö–ª–µ–±': 'üçû', '–º–æ–ª–æ–∫–æ': 'ü•õ', '—è–π—Ü–∞': 'ü•ö',
        '—Å—ã—Ä': 'üßÄ', '–º–∞—Å–ª–æ': 'üßà', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': 'ü•î', '–º–æ—Ä–∫–æ–≤—å': 'ü•ï', '–ª—É–∫': 'üßÖ',
        '–ø–æ–º–∏–¥–æ—Ä—ã': 'üçÖ', '–æ–≥—É—Ä—Ü—ã': 'ü•í', '–∫–∞–ø—É—Å—Ç–∞': 'ü•¨', '—Ä–∏—Å': 'üçö', '–º–∞–∫–∞—Ä–æ–Ω—ã': 'üçù',
        '—Å—É–ø': 'üç≤', '—Å–∞–ª–∞—Ç': 'ü•ó', '–ø–∏—Ä–æ–≥': 'ü•ß', '—Ç–æ—Ä—Ç': 'üéÇ', '–∫–æ–Ω—Ñ–µ—Ç—ã': 'üç¨',
        '—á–∞–π': '‚òï', '–∫–æ—Ñ–µ': '‚òï', '—Å–æ–∫': 'üßÉ', '–≤–æ–¥–∞': 'üíß', '–≤–∏–Ω–æ': 'üç∑',
        '–ø–∏–≤–æ': 'üç∫', '–≤–æ–¥–∫–∞': 'ü•É', '–∫–æ–Ω—å—è–∫': 'ü•É', '–ª–∏–∫–µ—Ä': 'üç∏', '–∫–æ–∫—Ç–µ–π–ª—å': 'üçπ'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º (—Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤—ã–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º)
    for food, emoji in food_emojis.items():
        if food in text.lower():
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
            text = text.replace(food, f"{emoji} {food}", 1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    lines = text.split('\n')
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if line.startswith('üçΩÔ∏è –ú–ï–ù–Æ'):
            formatted_lines.append(f"\nüéØ *{line}*")
        elif line.startswith('üõçÔ∏è –°–ü–ò–°–û–ö'):
            formatted_lines.append(f"\nüõí *{line}*")
        elif line.startswith('üìÖ '):
            formatted_lines.append(f"\nüìã *{line}*")
        elif line.startswith('üç≥ ') or line.startswith('üç≤ ') or line.startswith('üçΩÔ∏è '):
            formatted_lines.append(f"\nüç¥ *{line}*")
        else:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            formatted_lines.append(escape_problematic_chars(line))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    result = '\n'.join(formatted_lines)
    result = f"üé® *–ö–£–õ–ò–ù–ê–†–ù–û–ï –ú–ï–ù–Æ* üé®\n\n{result}\n\n‚ú® *–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!* ‚ú®"
    
    return result

def generate_menu(preferences, menu_type="–Ω–µ–¥–µ–ª—è"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é —á–µ—Ä–µ–∑ DeepSeek API"""
    try:
        logger.info("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ DeepSeek...")
        client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)

        if menu_type == "—Å–µ–≥–æ–¥–Ω—è":
            prompt = f"""–°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–ª—è —Å–µ–º—å–∏ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}.
            –£–∫–∞–∂–∏ –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∏—Ä–µ (-) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤."""
        else:
            prompt = f"""–°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è —Å–µ–º—å–∏ –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {preferences}.
            –£–∫–∞–∂–∏ –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–∏—Ä–µ (-) –¥–ª—è —Å–ø–∏—Å–∫–æ–≤."""

        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=2000
        )

        menu_content = response.choices[0].message.content
        logger.info(f"–ú–µ–Ω—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞: {len(menu_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return menu_content

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DeepSeek: {str(e)}"
        logger.error(error_msg)
        return error_msg

async def send_menu(chat_id, menu_text, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    keyboard = get_keyboard()
    formatted_menu = format_menu_text(menu_text)

    if len(formatted_menu) > 4096:
        parts = [formatted_menu[i:i+4096] for i in range(0, len(formatted_menu), 4096)]
        for i, part in enumerate(parts):
            if i == len(parts) - 1:
                await bot.send_message(
                    chat_id=chat_id, 
                    text=f"*–ß–∞—Å—Ç—å {i+1}:*\n{part}", 
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await bot.send_message(
                    chat_id=chat_id, 
                    text=f"*–ß–∞—Å—Ç—å {i+1}:*\n{part}",
                    parse_mode='Markdown'
                )
    else:
        await bot.send_message(
            chat_id=chat_id, 
            text=formatted_menu, 
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

async def auto_generate_menu(chat_id, menu_type, bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥"""
    await asyncio.sleep(60)
    
    if chat_id not in user_timers or user_timers[chat_id] != 'waiting':
        return

    logger.info(f"–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –¥–ª—è chat_id {chat_id}")
    keyboard = get_keyboard()

    await bot.send_message(
        chat_id=chat_id,
        text="*–Ø –ø–æ–Ω—è–ª, —Å–µ–π—á–∞—Å –≤—Å—ë —Å–¥–µ–ª–∞—é! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ...* üé®",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

    try:
        menu_text = generate_menu("—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "—Å–µ–≥–æ–¥–Ω—è" if menu_type == "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è" else "–Ω–µ–¥–µ–ª—è")
        await send_menu(chat_id, menu_text, bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="*–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é* ‚ùå",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    if chat_id in user_timers:
        del user_timers[chat_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = get_keyboard()
    user = update.effective_user
    chat_id = update.effective_chat.id

    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")

    await update.message.reply_text(
        f'*üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä!* üéâ\n\n'
        f'üçΩÔ∏è *–ì–æ—Ç–æ–≤ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç–≤–æ–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—á—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å!*\n'
        f'‚ú® –°–æ–∑–¥–∞–º –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n'
        f'üéØ –£—á—Ç—É –≤—Å–µ —Ç–≤–æ–∏ –≤–∫—É—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n\n'
        f'üöÄ *–ù–∞—á–Ω–µ–º –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ?*\n\n'
        f'üîß *–ú–∞–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã:*\n'
        f'üç≥ `/today` - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è *(–±—ã—Å—Ç—Ä–æ –∏ –≤–∫—É—Å–Ω–æ)*\n'
        f'üìÖ `/week` - –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é *(–ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è)*\n'
        f'üé≤ `/surprise` - –°–ª—É—á–∞–π–Ω–æ–µ –º–µ–Ω—é *(—Å—é—Ä–ø—Ä–∏–∑ –æ—Ç —à–µ—Ñ–∞)*\n'
        f'üìä `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n'
        f'‚ùì `/help` - –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n\n'
        f'üí° *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É!*\n\n'
        f'üî¢ Session ID: `{SESSION_ID}`\n'
        f'‚è∞ –ó–∞–ø—É—â–µ–Ω: `{BOT_START_TIME}`',
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üé≠ *–ö–£–õ–ò–ù–ê–†–ù–´–ô –¢–ï–ê–¢–†* - –¢–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã:

üç≥ *`/today`* - –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
   –ë—ã—Å—Ç—Ä–æ–µ –∏ –≤–∫—É—Å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è

üìÖ *`/week`* - –ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é  
   –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 7 –¥–Ω–µ–π

üé≤ *`/surprise`* - –°–ª—É—á–∞–π–Ω–æ–µ –º–µ–Ω—é
   –°—é—Ä–ø—Ä–∏–∑ –æ—Ç —à–µ—Ñ–∞ - —á—Ç–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ!

üìä *`/stats`* - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
   –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã

‚ùì *`/help`* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
   –í—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è

üéØ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É
2. –ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è *(–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ª—é–±–ª—é —Ä—ã–±—É", "–±–µ–∑ –º—è—Å–∞", "–±—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ")*
3. –ü–æ–ª—É—á–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é! ‚ú®

üí° *–°–æ–≤–µ—Ç:* –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏ 1 –º–∏–Ω—É—Ç—É - —è —Å–∞–º –ø—Ä–∏–¥—É–º–∞—é —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ! üòã
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def today_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    keyboard = get_keyboard()
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    await update.message.reply_text(
        f"üç≥ *{user.first_name}, –≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!*\n\n"
        f"‚ú® *–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:*\n"
        f"‚Ä¢ –õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        f"‚Ä¢ –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
        f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –≥–æ—Ç–æ–≤–∫—É\n"
        f"‚Ä¢ –õ—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n\n"
        f"üí° *–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏ 1 –º–∏–Ω—É—Ç—É - —è —Å–∞–º —Å–æ–∑–¥–∞–º —á—Ç–æ-—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ!* üé®",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    context.user_data['menu_type'] = "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è"
    user_timers[chat_id] = 'waiting'
    asyncio.create_task(auto_generate_menu(chat_id, "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è", context.bot))
    logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} (–∫–æ–º–∞–Ω–¥–∞ /today)")

async def week_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    keyboard = get_keyboard()
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    await update.message.reply_text(
        f"üìÖ *{user.first_name}, –ø–ª–∞–Ω–∏—Ä—É—é —Ç–≤–æ–µ –∏–¥–µ–∞–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é!*\n\n"
        f"üåü *–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö:*\n"
        f"‚Ä¢ –õ—é–±–∏–º—ã–µ –∫—É—Ö–Ω–∏ –º–∏—Ä–∞\n"
        f"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—Ä–∞–≤—è—Ç—Å—è/–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è\n"
        f"‚Ä¢ –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏\n"
        f"‚Ä¢ –ë—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        f"üí° *–ò–ª–∏ –¥–æ–≤–µ—Ä—å—Å—è –º–æ–µ–º—É –æ–ø—ã—Ç—É - —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –ø–ª–∞–Ω!* üìã",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    context.user_data['menu_type'] = "üìÖ –ù–µ–¥–µ–ª—è"
    user_timers[chat_id] = 'waiting'
    asyncio.create_task(auto_generate_menu(chat_id, "üìÖ –ù–µ–¥–µ–ª—è", context.bot))
    logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} (–∫–æ–º–∞–Ω–¥–∞ /week)")

async def surprise_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = get_keyboard()
    chat_id = update.effective_chat.id
    user = update.effective_user
    
    await update.message.reply_text(
        f"üé≤ *{user.first_name}, –≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑!*\n\n"
        f"üé™ *–≠—Ç–æ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ:*\n"
        f"‚Ä¢ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
        f"‚Ä¢ –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –±–ª—é–¥–∞\n"
        f"‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏\n\n"
        f"üí´ *–ù–∞–ø–∏—à–∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏ - —Å—é—Ä–ø—Ä–∏–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è!* üéÅ",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    
    context.user_data['menu_type'] = "üé≤ –°—é—Ä–ø—Ä–∏–∑"
    user_timers[chat_id] = 'waiting'
    asyncio.create_task(auto_generate_menu(chat_id, "üé≤ –°—é—Ä–ø—Ä–∏–∑", context.bot))
    logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} (–∫–æ–º–∞–Ω–¥–∞ /surprise)")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    uptime_seconds = int(time.time() - time.mktime(time.strptime(BOT_START_TIME, '%Y-%m-%d %H:%M:%S')))
    uptime_minutes = uptime_seconds // 60
    uptime_hours = uptime_minutes // 60
    uptime_days = uptime_hours // 24
    
    uptime_str = f"{uptime_days}–¥ {uptime_hours%24}—á {uptime_minutes%60}–º {uptime_seconds%60}—Å"
    active_timers = len([k for k, v in user_timers.items() if v == 'waiting'])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = len(user_timers)
    menus_generated = total_users * 2  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    
    stats_text = (
        f"üìä *–ö–£–õ–ò–ù–ê–†–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê* üìä\n\n"
        f"ü§ñ *–ë–æ—Ç-—à–µ—Ñ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        f"üî¢ Session ID: `{SESSION_ID}`\n"
        f"‚è∞ –ó–∞–ø—É—â–µ–Ω: `{BOT_START_TIME}`\n"
        f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: `{current_time}`\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `{uptime_str}`\n\n"
        f"üë• *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: `{active_timers}`\n"
        f"üë®‚Äçüç≥ –ü–æ–≤–∞—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: `{total_users}`\n"
        f"üçΩÔ∏è –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ: `{menus_generated}`\n\n"
        f"üéØ *–°—Ç–∞—Ç—É—Å:* {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if active_timers > 0 else 'üü° –û–∂–∏–¥–∞–Ω–∏–µ'}\n\n"
        f"üí° *–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —à–µ–¥–µ–≤—Ä—ã!* ‚ú®"
    )
    
    logger.info(f"üìä –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_chat.id}")
    await update.message.reply_text(stats_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def command1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è /command1"""
    await today_menu(update, context)

async def command2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è /command2"""
    await week_menu(update, context)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è /status"""
    await stats(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text
    chat_id = update.effective_chat.id
    keyboard = get_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
    if message_text in ["üìÖ –ù–µ–¥–µ–ª—è", "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è"]:
        await update.message.reply_text(
            "*–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏.*\n\n"
            "üí° *–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 –º–∏–Ω—É—Ç—É - –∏ —è —Å—Ñ–æ—Ä–º–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!*",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        context.user_data['menu_type'] = message_text
        user_timers[chat_id] = 'waiting'
        asyncio.create_task(auto_generate_menu(chat_id, message_text, context.bot))
        logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è chat_id {chat_id}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
    preferences = message_text.lower()
    menu_type = context.user_data.get('menu_type', 'üìÖ –ù–µ–¥–µ–ª—è')

    # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª
    if chat_id in user_timers:
        user_timers[chat_id] = 'answered'
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª, –æ—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è chat_id {chat_id}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    if menu_type == "üçΩÔ∏è –°–µ–≥–æ–¥–Ω—è":
        await update.message.reply_text("*–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...* üç≥", reply_markup=keyboard, parse_mode='Markdown')
        menu_text = generate_menu(preferences, "—Å–µ–≥–æ–¥–Ω—è")
    elif menu_type == "üé≤ –°—é—Ä–ø—Ä–∏–∑":
        await update.message.reply_text("*–ì–æ—Ç–æ–≤–ª—é –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑...* üé≤", reply_markup=keyboard, parse_mode='Markdown')
        menu_text = generate_menu(preferences + " –Ω–µ–æ–±—ã—á–Ω—ã–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –±–ª—é–¥–∞", "–Ω–µ–¥–µ–ª—è")
    else:
        await update.message.reply_text("*–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é...* üìÖ", reply_markup=keyboard, parse_mode='Markdown')
        menu_text = generate_menu(preferences, "–Ω–µ–¥–µ–ª—è")

    try:
        await send_menu(chat_id, menu_text, context.bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("*–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é* ‚ùå", reply_markup=keyboard, parse_mode='Markdown')

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    if isinstance(context.error, Conflict):
        logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç - –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")

def setup_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥"""
    # –ù–æ–≤—ã–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("today", today_menu))
    application.add_handler(CommandHandler("week", week_menu))
    application.add_handler(CommandHandler("surprise", surprise_menu))
    application.add_handler(CommandHandler("stats", stats))
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    application.add_handler(CommandHandler("command1", command1))
    application.add_handler(CommandHandler("command2", command2))
    application.add_handler(CommandHandler("status", status))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    if not TELEGRAM_TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False

    if not DEEPSEEK_API_KEY:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω DeepSeek API –∫–ª—é—á! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DEEPSEEK_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    return True

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not validate_config():
        return

    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {BOT_START_TIME}")
    print(f"üî¢ Session ID: {SESSION_ID}")
    print(f"üîë Telegram Token: {TELEGRAM_TOKEN[:20] if TELEGRAM_TOKEN else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}...")
    print(f"üîë DeepSeek API Key: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if DEEPSEEK_API_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    setup_handlers(application)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES,
            close_loop=False
        )
    except Conflict as e:
        logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.info("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 